var format = require("string_format");

var config = {
    sql: {
        server: process.env.DB_SERVER,
        userName: process.env.DB_USER,
        password: process.env.DB_PASSWORD,
        options: {
            database: process.env.DB_NAME,
            encrypt: true,
            connectTimeout: 5000,
            requestTimeout: 5000
        }
    },
    storage: {
        account: process.env.STORAGE_ACCOUNT,
        key: process.env.STORAGE_KEY
    },
    queues: {
        scoring: process.env.QUEUE_SCORING,
        new_ids: process.env.QUEUE_NEW_IDS,
        trigger_query: process.env.QUEUE_TRIGGER_QUERY
    },
    blobs: {
        sentences: process.env.BLOB_SENTENCES
    },
    log: {
        level: process.env.LOG_LEVEL,
        transporters: [
            {
              name: 'console', 
              write : true, 
              default: false,
              options: {
                level: 'info'
              }
            },
            {
                name: 'azuretable', write : true, default: true,
                options: {
                    storage: {
                        account: process.env.LOG_STORAGE_ACCOUNT,
                        key: process.env.LOG_STORAGE_KEY
                    }
                }
            }]
    },
    services: {
      docServiceUrl: process.env.SERVICE_DOC_URL,
      scoring: [process.env.SK_SCORING_URL, process.env.TLC_SCORING_URL] 
    }
};

function checkParam(paramValue, paramInfo, paramKey) {
    "use strict";
    
    if (!paramValue) {
        var errorFormat = '{} was not provided, please add {} to environment variables';
        throw new Error(errorFormat.format(paramInfo, paramKey));
    }
}

checkParam(config.sql.server, 'Sql server', 'DB_SERVER');
checkParam(config.sql.userName, 'Sql user', 'DB_USER');
checkParam(config.sql.password, 'password for db', 'DB_PASSWORD');
checkParam(config.sql.options.database, 'db name', 'DB_NAME');

// validate log azure storage account
checkParam(config.storage.account, 'storage account', 'STORAGE_ACCOUNT');
checkParam(config.storage.key, 'storage key', 'STORAGE_KEY');

// validate queues
checkParam(config.queues.scoring, 'scoring queue name', 'QUEUE_SCORING');
checkParam(config.queues.new_ids, 'new ids queue', 'QUEUE_NEW_IDS');
checkParam(config.queues.trigger_query, 'trigger query queue', 'QUEUE_TRIGGER_QUERY');

// validate log azure storage account
checkParam(config.log.level, 'log level', 'LOG_LEVEL');
checkParam(config.log.transporters[1].options.storage.account, 'log storage account name', 'LOG_STORAGE_ACCOUNT');
checkParam(config.log.transporters[1].options.storage.key, 'log storage account key', 'LOG_STORAGE_KEY');

//validate urls
checkParam(config.services.docServiceUrl, 'doc service url', 'SERVICE_DOC_URL');
checkParam(config.services.scoring && config.services.scoring[0], 'scoring services url', 'SK_SCORING_URL');
checkParam(config.services.scoring && config.services.scoring[1], 'scoring services url', 'TLC_SCORING_URL');

module.exports = config;
