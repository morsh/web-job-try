var uuid = require("node-uuid");
var async = require("async");
var constants = require("x-constants");
var config = require("x-config");
var queue = require("x-queue");
var blob = require("x-blob");
var parserUtils = require('x-paper-parser/lib/parserUtils.js');

function run(fileName, callback) {
    
    callback = callback || Function;
    
    console.info('====================================================');
    console.info('Uploading sentences into blob storage...');
    console.info('====================================================');
    
    // Initializing queues
    var blobInConfig = {
        storageName: config.storage.account,
        storageKey: config.storage.key,
        blobName: config.blobs.sentences
    };
    var queueOutConfig = {
        storageName: config.storage.account,
        storageKey: config.storage.key,
        queueName: config.queues.scoring
    };
    
    var blobIn = blob(blobInConfig);
    var queueOut = queue(queueOutConfig);
    
    return queueOut.init(function (err) {
        if (err) {
            console.error(err);
            return callback(err);
        }
        console.info('start processing scoring queue');
        
        return blobIn.init(function (err) {
            if (err) {
                console.error(err);
                return callback(err);
            }
            console.info('start processing sentences blob');
            
            return checkBlob(callback);
        });
    });
    
    function checkBlob(cb) {
        console.info("Querying for sentences file");
        
        return blobIn.getFile(fileName, function (err, fileContent) {
            if (err) {
                console.error(err);
                return callback(err);
            }
            console.info('Start processing message from queue...');
            
            return processSentences(fileContent, cb);
        });
    }
    
    function processSentences(fileContent, cb) {
        var lines = fileContent.split(/\r?\n/);
        var docId = uuid.v4();
        console.info('Created new file id %s with %s lines in file', docId, lines.length);
        
        // Iterating through all lines in the file and queuing them to out queue
        // (Maximum of 100 queue messages at a time)
        return async.eachLimit(lines, 10, queueLine, function (err) {
            if (err) {
                console.error('There was a problem queuing lines in the file', docId, err);
                return cb(err);
            }
            console.info('Done queuing all lines in file');
            return cb();
        });
        
        function queueLine(line, cb) {
            var index = lines.indexOf(line);
            var outMessage = parserUtils.createQueueSentenceMessage(constants.sources.GENERAL, docId, index, line); // TODO: update in db script + change to opts
            
            return queueOut.sendMessage(outMessage, function (err) {
                if (err) {
                    console.error('There was a problem queuing line %s in the file', index);
                    return cb(err);
                }
                console.log('Queued line index %s in the file', index);
                return cb();
            });
        }
    
    }
}

module.exports = {
    run: run
};